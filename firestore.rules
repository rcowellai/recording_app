rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidAnonymousSession(sessionId) {
      return isAuthenticated() && 
             request.auth.token.firebase.sign_in_provider == 'anonymous' &&
             exists(/databases/$(database)/documents/recordingSessions/$(sessionId)) &&
             get(/databases/$(database)/documents/recordingSessions/$(sessionId)).data.status == 'active' &&
             get(/databases/$(database)/documents/recordingSessions/$(sessionId)).data.expiresAt > request.time;
    }
    
    // Helper function for Love Retold anonymous updates
    function onlyUpdatingFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(fields);
    }
    
    // Users collection - strict user isolation
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Prompts collection - user-specific access only
    match /prompts/{promptId} {
      allow read, write: if isAuthenticated() && 
                        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
    }
    
    // Recording sessions - Love Retold anonymous access pattern
    match /recordingSessions/{sessionId} {
      // Anonymous read access (anyone with link can read)
      allow read: if true;
      
      // Anonymous limited writes (status/progress updates only)
      allow update: if request.auth == null &&
        onlyUpdatingFields([
          'status', 'recordingData', 'storagePaths', 
          'recordingStartedAt', 'recordingCompletedAt', 'error'
        ]) &&
        resource.data.status in ['pending', 'active', 'recording', 'uploading', 'failed'];
      
      // Authenticated access for session owner (main app)
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
      
      // Create access for authenticated users only (main app)
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
    }
    
    // Stories collection - strict user isolation
    match /stories/{storyId} {
      allow read, write: if isAuthenticated() && 
                        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
    }
    
    // System collections (admin only) - for future use
    match /system/{document=**} {
      allow read, write: if false; // Admin SDK only
    }
    
    // Analytics collection (write-only for metrics)
    match /analytics/{document=**} {
      allow write: if isAuthenticated();
      allow read: if false; // Admin SDK only
    }
  }
}