rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidRecordingSession(sessionId) {
      return isAuthenticated() && 
             firestore.exists(/databases/(default)/documents/recordingSessions/$(sessionId)) &&
             firestore.get(/databases/(default)/documents/recordingSessions/$(sessionId)).data.status == 'active' &&
             firestore.get(/databases/(default)/documents/recordingSessions/$(sessionId)).data.expiresAt > request.time;
    }
    
    // Enhanced validation for anonymous uploads
    function isValidAnonymousUpload(sessionId) {
      return request.auth != null && 
             request.auth.token.firebase.sign_in_provider == 'anonymous' &&
             firestore.exists(/databases/(default)/documents/recordingSessions/$(sessionId)) &&
             firestore.get(/databases/(default)/documents/recordingSessions/$(sessionId)).data.status in ['pending', 'active', 'recording', 'uploading'];
    }
    
    // Love Retold recording storage - anonymous upload allowed
    match /users/{userId}/recordings/{sessionId}/chunks/{fileName} {
      allow write: if request.auth != null && 
                     request.auth.token.firebase.sign_in_provider == 'anonymous' &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB chunk limit
        fileName.matches('chunk-[0-9]+') &&
        request.resource.contentType.matches('(video|audio)/.*');
      
      // Owner can read their own recordings
      allow read: if isAuthenticated() && isOwner(userId);
    }

    match /users/{userId}/recordings/{sessionId}/final/{fileName} {
      allow write: if request.auth != null && 
                     request.auth.token.firebase.sign_in_provider == 'anonymous' &&
        request.resource.size < 500 * 1024 * 1024 && // 500MB total limit
        fileName.matches('recording\\.(webm|mp4|m4a)') &&
        request.resource.contentType.matches('(video|audio)/.*');
      
      // Owner can read their own recordings
      allow read: if isAuthenticated() && isOwner(userId);
    }

    match /users/{userId}/recordings/{sessionId}/thumbnail.jpg {
      allow write: if request.auth != null && 
                     request.auth.token.firebase.sign_in_provider == 'anonymous' &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB thumbnail limit
        request.resource.contentType.matches('image/.*');
      
      // Owner can read their own recordings
      allow read: if isAuthenticated() && isOwner(userId);
    }

    // Legacy recordings - authenticated users only (backward compatibility)
    match /recordings/{sessionId}/{fileName} {
      // Allow read if user owns the session
      allow read: if isAuthenticated() && (
        firestore.exists(/databases/(default)/documents/recordingSessions/$(sessionId)) &&
        firestore.get(/databases/(default)/documents/recordingSessions/$(sessionId)).data.userId == request.auth.uid
      );
      
      // Allow write for valid recording sessions
      allow write: if isAuthenticated() && 
                  isValidRecordingSession(sessionId) && (
                    firestore.get(/databases/(default)/documents/recordingSessions/$(sessionId)).data.userId == request.auth.uid ||
                    request.auth.token.firebase.sign_in_provider == 'anonymous'
                  ) &&
                  request.resource.size < 100 * 1024 * 1024 &&
                  (fileName.matches('.*\\.(webm|wav|mp4|m4a)$'));
    }
    
    // Processed files (generated by Cloud Functions)
    match /processed/{storyId}/{fileName} {
      // Only allow read if user owns the story
      allow read: if isAuthenticated() && 
                 firestore.exists(/databases/(default)/documents/stories/$(storyId)) &&
                 firestore.get(/databases/(default)/documents/stories/$(storyId)).data.userId == request.auth.uid;
      
      // Only Cloud Functions can write processed files
      allow write: if false;
    }
    
    // Temporary files (cleanup handled by Cloud Functions)
    match /temp/{sessionId}/{fileName} {
      // Allow read/write for valid sessions
      allow read, write: if isAuthenticated() && 
                        isValidRecordingSession(sessionId) &&
                        request.resource.size < 50 * 1024 * 1024; // 50MB limit for temp files
    }
    
    // User profile images (future use)
    match /profiles/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) &&
                  request.resource.size < 5 * 1024 * 1024 && // 5MB limit
                  fileName.matches('.*\\.(jpg|jpeg|png|webp)$');
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}